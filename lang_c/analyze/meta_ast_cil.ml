(* generated by ocamltarzan with: camlp4o -o /tmp/yyy.ml -I pa/ pa_type_conv.cmo pa_vof.cmo  pr_o.cmo /tmp/xxx.ml  *)

open Ast_cil

let vof_name (s, _) =
  OCaml.vof_string s
let vof_var x =
  vof_name x

let vof_wrap ofa x =
  ofa (fst x)

let vof_type_ x =
  Meta_ast_c.vof_type_ x

let vof_lvalue =
  function
  | Id v1 -> let v1 = vof_name v1 in OCaml.VSum (("Id", [ v1 ]))
  | ObjField ((v1, v2)) ->
      let v1 = vof_var v1
      and v2 = vof_name v2
      in OCaml.VSum (("ObjField", [ v1; v2 ]))
  | ArrayAccess ((v1, v2)) ->
      let v1 = vof_var v1
      and v2 = vof_var v2
      in OCaml.VSum (("ArrayAccess", [ v1; v2 ]))
  | DeRef v1 -> let v1 = vof_var v1 in OCaml.VSum (("DeRef", [ v1 ]))
  
let vof_rvalue =
  function
  | Int v1 ->
      let v1 = vof_wrap OCaml.vof_string v1 in OCaml.VSum (("Int", [ v1 ]))
  | Float v1 ->
      let v1 = vof_wrap OCaml.vof_string v1 in OCaml.VSum (("Float", [ v1 ]))
  | String v1 ->
      let v1 = vof_wrap OCaml.vof_string v1
      in OCaml.VSum (("String", [ v1 ]))
  | StaticCall ((v1, v2)) ->
      let v1 = vof_name v1
      and v2 = OCaml.vof_list vof_var v2
      in OCaml.VSum (("StaticCall", [ v1; v2 ]))
  | DynamicCall ((v1, v2)) ->
      let v1 = vof_var v1
      and v2 = OCaml.vof_list vof_var v2
      in OCaml.VSum (("DynamicCall", [ v1; v2 ]))
  | BuiltinCall ((v1, v2)) ->
      let v1 = vof_name v1
      and v2 = OCaml.vof_list vof_var v2
      in OCaml.VSum (("BuiltinCall", [ v1; v2 ]))
  | Alloc v1 -> let v1 = vof_type_ v1 in OCaml.VSum (("Alloc", [ v1 ]))
  | AllocArray ((v1, v2)) ->
      let v1 = vof_var v1
      and v2 = vof_type_ v2
      in OCaml.VSum (("AllocArray", [ v1; v2 ]))
  | Lv v1 -> let v1 = vof_lvalue v1 in OCaml.VSum (("Lv", [ v1 ]))
  
let vof_instr =
  function
  | Assign ((v1, v2)) ->
      let v1 = vof_var v1
      and v2 = vof_rvalue v2
      in OCaml.VSum (("Assign", [ v1; v2 ]))
  | AssignAddress ((v1, v2)) ->
      let v1 = vof_var v1
      and v2 = vof_lvalue v2
      in OCaml.VSum (("AssignAddress", [ v1; v2 ]))
  | AssignLvalue ((v1, v2)) ->
      let v1 = vof_lvalue v1
      and v2 = vof_var v2
      in OCaml.VSum (("AssignLvalue", [ v1; v2 ]))
  

